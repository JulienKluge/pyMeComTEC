#autogenerated content
from enum import Enum
from TEC_Helper import MeComError, MeComException, MeParFlags, MeParType

class _MeerstetterTEC_autogen:

    def __init__(self):
        raise Exception("This is a autogenerated class not meant to be instantiated")

    def find_meparid(self, needle):
        if type(needle) == int:
            for tp in self.TEC_PARAMETERS:
                if (tp["id"] == needle):
                    return tp
        elif type(needle) == str:
            for tp in self.TEC_PARAMETERS:
                if (tp["name"].lower() == needle.lower()):
                    return tp
        return None

    TEC_PARAMETERS = [
		{"prefix": "COM", "id": 100, "name": "DeviceType", "type": int, "mepar_type": MeParType.INT32, "readonly": True},
		{"prefix": "COM", "id": 101, "name": "HardwareVersion", "type": int, "mepar_type": MeParType.INT32, "readonly": True},
		{"prefix": "COM", "id": 102, "name": "SerialNumber", "type": int, "mepar_type": MeParType.INT32, "readonly": True},
		{"prefix": "COM", "id": 103, "name": "FirmwareVersion", "type": int, "mepar_type": MeParType.INT32, "readonly": True},
		{"prefix": "COM", "id": 104, "name": "DeviceStatus", "type": int, "mepar_type": MeParType.INT32, "readonly": True},
		{"prefix": "COM", "id": 105, "name": "ErrorNumber", "type": int, "mepar_type": MeParType.INT32, "readonly": True},
		{"prefix": "COM", "id": 106, "name": "ErrorInstance", "type": int, "mepar_type": MeParType.INT32, "readonly": True},
		{"prefix": "COM", "id": 107, "name": "ErrorParameter", "type": int, "mepar_type": MeParType.INT32, "readonly": True},
		{"prefix": "COM", "id": 108, "name": "ParameterSystemFlashSaveOff", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "COM", "id": 109, "name": "ParameterSystemFlashStatus", "type": int, "mepar_type": MeParType.INT32, "readonly": True},
		{"prefix": "TEC", "id": 1000, "name": "ObjectTemperature", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 1001, "name": "SinkTemperature", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 1010, "name": "TargetObjectTemperature", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 1011, "name": "RampNominalObjectTemperature", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 1012, "name": "ThermalPowerModelCurrent", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 1020, "name": "ActualOutputCurrent", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 1021, "name": "ActualOutputVoltage", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 1030, "name": "PIDLowerLimitation", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 1031, "name": "PIDUpperLimitation", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 1032, "name": "PIDControlVariable", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 1040, "name": "ObjectSensorRawADCValue", "type": int, "mepar_type": MeParType.INT32, "readonly": True},
		{"prefix": "TEC", "id": 1041, "name": "SinkSensorRawADCValue", "type": int, "mepar_type": MeParType.INT32, "readonly": True},
		{"prefix": "TEC", "id": 1042, "name": "ObjectSensorResistance", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 1043, "name": "SinkSensorResitance", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 1044, "name": "SinkSensorTemperature", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 1050, "name": "FirmwareVersion", "type": int, "mepar_type": MeParType.INT32, "readonly": True},
		{"prefix": "TEC", "id": 1051, "name": "FirmwareBuildNumber", "type": int, "mepar_type": MeParType.INT32, "readonly": True},
		{"prefix": "TEC", "id": 1052, "name": "HardwareVersion", "type": int, "mepar_type": MeParType.INT32, "readonly": True},
		{"prefix": "TEC", "id": 1053, "name": "SerialNumber", "type": int, "mepar_type": MeParType.INT32, "readonly": True},
		{"prefix": "TEC", "id": 1060, "name": "DriverInputVoltage", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 1061, "name": "MedVInternalSupply", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 1062, "name": "3VInternalSupply", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 1063, "name": "BasePlateTemperature", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 1070, "name": "ErrorNumber", "type": int, "mepar_type": MeParType.INT32, "readonly": True},
		{"prefix": "TEC", "id": 1071, "name": "ErrorInstance", "type": int, "mepar_type": MeParType.INT32, "readonly": True},
		{"prefix": "TEC", "id": 1072, "name": "ErrorParameter", "type": int, "mepar_type": MeParType.INT32, "readonly": True},
		{"prefix": "TEC", "id": 1090, "name": "ParallelActualOutputCurrent", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 1080, "name": "DriverStatus", "type": int, "mepar_type": MeParType.INT32, "readonly": True},
		{"prefix": "TEC", "id": 1081, "name": "ParameterSystemFlashStatus", "type": int, "mepar_type": MeParType.INT32, "readonly": True},
		{"prefix": "TEC", "id": 1100, "name": "FanRelativeCoolingPower", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 1101, "name": "FanNominalFanSpeed", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 1102, "name": "FanActualFanSpeed", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 1103, "name": "FanActualPwmLevel", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 1200, "name": "TemperatureIsStable", "type": int, "mepar_type": MeParType.INT32, "readonly": True},
		{"prefix": "TEC", "id": 2000, "name": "OutputStageInputSelection", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 2010, "name": "OutputStageEnable", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 2020, "name": "SetStaticCurrent", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 2021, "name": "SetStaticVoltage", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 2030, "name": "CurrentLimitation", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 2031, "name": "VoltageLimitation", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 2032, "name": "CurrentErrorThreshold", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 2033, "name": "VoltageErrorThreshold", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 2040, "name": "GeneralOperatingMode", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 2051, "name": "DeviceAddress", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 2050, "name": "RS485CH1BaudRate", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 2052, "name": "RS485CH1ResponseDelay", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 2060, "name": "ComWatchDogTimeout", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 3000, "name": "TargetObjectTemp", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 3003, "name": "CoarseTempRamp", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 3002, "name": "ProximityWidth", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 3010, "name": "Kp", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 3011, "name": "Ti", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 3012, "name": "Td", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 3013, "name": "DPartDampPT1", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 3020, "name": "ModelizationMode", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 3030, "name": "PeltierMaxCurrent", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 3031, "name": "PeltierMaxVoltage", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 3032, "name": "PeltierCoolingCapacity", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 3033, "name": "PeltierDeltaTemperature", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 3034, "name": "PeltierPositiveCurrentIs", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 3040, "name": "ResistorResistance", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 3041, "name": "ResistorMaxCurrent", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 4001, "name": "TemperatureOffset", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 4002, "name": "TemperatureGain", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 4010, "name": "LowerErrorThreshold", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 4011, "name": "UpperErrorThreshold", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 4012, "name": "MaxTempChange", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 4020, "name": "NTCLowerPointTemperature", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 4021, "name": "NTCLowerPointResistance", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 4022, "name": "NTCMiddlePointTemperature", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 4023, "name": "NTCMiddlePointResistance", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 4024, "name": "NTCUpperPointTemperature", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 4025, "name": "NTCUpperPointResistance", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 4040, "name": "StabilityTemperatureWindow", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 4041, "name": "StabilityMinTimeInWindow", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 4042, "name": "StabilityMaxStabiTime", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 4030, "name": "MeasLowestResistance", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 4031, "name": "MeasHighestResistance", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 4032, "name": "MeasTempAtLowestResistance", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 4033, "name": "MeasTempAtHighestResistance", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 5001, "name": "TemperatureOffset", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 5002, "name": "TemperatureGain", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 5010, "name": "LowerErrorThreshold", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 5011, "name": "UpperErrorThreshold", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 5012, "name": "MaxTempChange", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 5020, "name": "NTCLowerPointTemperature", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 5021, "name": "NTCLowerPointResistance", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 5022, "name": "NTCMiddlePointTemperature", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 5023, "name": "NTCMiddlePointResistance", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 5024, "name": "NTCUpperPointTemperature", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 5025, "name": "NTCUpperPointResistance", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 5030, "name": "SinkTemperatureSelection", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 5031, "name": "FixedTemperature", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 5040, "name": "MeasLowestResistance", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 5041, "name": "MeasHighestResistance", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 5042, "name": "MeasTempAtLowestResistance", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 5043, "name": "MeasTempAtHighestResistance", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 6000, "name": "ObjMeasPGAGain", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 6001, "name": "ObjMeasCurrentSource", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 6002, "name": "ObjMeasADCRs", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 6003, "name": "ObjMeasADCCalibOffset", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 6004, "name": "ObjMeasADCCalibGain", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 6005, "name": "ObjMeasSensorTypeSelection", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 6010, "name": "SinMeasADCRv", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 6013, "name": "SinMeasADCVps", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 6011, "name": "SinMeasADCCalibOffset", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 6012, "name": "SinMeasADCCalibGain", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 6020, "name": "DisplayType", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 6023, "name": "AlternativeMode", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 6024, "name": "DisplayLineDefText", "type": str, "mepar_type": MeParType.LATIN1, "readonly": False},
		{"prefix": "TEC", "id": 6025, "name": "DisplayLineAltText", "type": str, "mepar_type": MeParType.LATIN1, "readonly": False},
		{"prefix": "TEC", "id": 6026, "name": "DisplayLineAltMode", "type": str, "mepar_type": MeParType.LATIN1, "readonly": False},
		{"prefix": "TEC", "id": 6100, "name": "PbcFunction", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 6110, "name": "ChangeButtonLowTemperature", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 6111, "name": "ChangeButtonHighTemperature", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 6112, "name": "ChangeButtonStepSize", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 6200, "name": "FanControlEnable", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 6210, "name": "FanActualTempSource", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 6211, "name": "FanTargetTemp", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 6212, "name": "FanTempKp", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 6213, "name": "FanTempTi", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 6214, "name": "FanTempTd", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 6220, "name": "FanSpeedMin", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 6221, "name": "FanSpeedMax", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 6222, "name": "FanSpeedKp", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 6223, "name": "FanSpeedTi", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 6224, "name": "FanSpeedTd", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 6225, "name": "FanSpeedBypass", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 6230, "name": "PwmFrequency", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 6300, "name": "MiscActObjectTempSource", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 6310, "name": "MiscDelayTillReset", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 6320, "name": "MiscError108Delay", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 50000, "name": "LiveEnable", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 50001, "name": "LiveSetCurrent", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 50002, "name": "LiveSetVoltage", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 50010, "name": "SineRampStartPoint", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 50011, "name": "ObjectTargetTempSourceSelection", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 50012, "name": "ObjectTargetTemperature", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False},
		{"prefix": "TEC", "id": 51000, "name": "AtmAutoTuningStart", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 51001, "name": "AtmAutoTuningCancel", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 51002, "name": "AtmThermalModelSpeed", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 51010, "name": "AtmTuningParameter2A", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 51011, "name": "AtmTuningParameter2D", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 51012, "name": "AtmTuningParameterKu", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 51013, "name": "AtmTuningParameterTu", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 51014, "name": "AtmPIDParameterKp", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 51015, "name": "AtmPIDParameterTi", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 51016, "name": "AtmPIDParameterTd", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 51022, "name": "AtmSlowPIParameterKp", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 51023, "name": "AtmSlowPIParameterTi", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 51024, "name": "AtmPIDDPartDamping", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 51017, "name": "AtmCoarseTempRamp", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 51018, "name": "AtmProximityWidth", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 51020, "name": "AtmTuningStatus", "type": int, "mepar_type": MeParType.INT32, "readonly": True},
		{"prefix": "TEC", "id": 51021, "name": "AtmTuningProgress", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": True},
		{"prefix": "TEC", "id": 52000, "name": "LutTableStart", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 52001, "name": "LutTableStop", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 52002, "name": "LutTableStatus", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 52003, "name": "LutCurrentTableLine", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 52010, "name": "LutTableIDSelection", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 52012, "name": "LutNrOfRepetitions", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 52100, "name": "PbcEnableFunction", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 52101, "name": "PbcSetOutputToPushPull", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 52102, "name": "PbcSetOutputStates", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 52103, "name": "PbcReadInputStates", "type": int, "mepar_type": MeParType.INT32, "readonly": False},
		{"prefix": "TEC", "id": 52200, "name": "ExternalActualObjectTemperature", "type": float, "mepar_type": MeParType.FLOAT32, "readonly": False}
    ]

    TEC_ERRORS = {
        0: "No Error",
        1: "Processor Error:\nMCU system malfunction",
        2: "Processor Error:\nMCU system malfunction",
        3: "Processor Error:\nMCU system malfunction",
        4: "Processor Error:\nMCU system malfunction",
        5: "Processor Error:\nMCU system malfunction",
        6: "Processor Error:\nMCU system malfunction",
        7: "Processor Error:\nMCU system malfunction",
        8: "Processor Error:\nMCU system malfunction",
        9: "Processor Error:\nMCU system malfunction",
        10: "Processor Error:\nMCU system malfunction",
        11: "LTR-1200 Emergency Stop",
        12: "LTR-1200 HMI Free Timeout",
        20: "Parameter Error:\nInternal parameter system malfunction",
        21: "Parameter Error:\nInternal parameter system malfunction",
        22: "Parameter Error:\nParameter set corrupt (Configuration flash empty or defect)\n\nLoad .ini file saved prior to FW update, or Default.ini",
        23: "Parameter Error:\nParameter set incompatible with current firmware version\n\nLoad .ini file saved prior to FW update, or Default.ini",
        24: "Parameter Error:\nFirmware does not recognize valid device",
        25: "Parameter Error:\nInternal parameter system malfunction (Access to a non-existing instance)",
        26: "Parameter Error:\nInternal limit system malfunction",
        27: "Parameter Error:\nParameter write or read wrong datatype function used",
        28: "Parameter Error:\nParameter write value out of range",
        29: "Parameter Error:\nParameter save to flash called from interrupt.",
        30: "Power Supply Error:\nInput voltage net < Hard Limit",
        31: "Power Supply Error:\nInput voltage net > Hard Limit",
        32: "Power Supply Error:\nInternal Medium Voltage power net < Hard Limit",
        33: "Power Supply Error:\nInternal Medium Voltage power net > Hard Limit",
        36: "Power Supply Error:\nInternal 3.3V power net < Hard Limit",
        37: "Power Supply Error:\nInternal 3.3V power net > Hard Limit",
        50: "Flash Error:\nOn-board flash failure\nWrite Timeout",
        51: "Flash Error:\nOn-board flash failure\nErase Timeout",
        52: "Flash Error:\nOn-board flash failure\nInvalid Address",
        53: "UART Error:\nSend buffer overflow error",
        60: "Temperature Error:\nDevice running too hot",
        61: "External Hardware Error:\nCommunication error with I/O hardware during factory test",
        100: "TEC Power Output Error:\nOvercurrent (positive) at OUT+\n[Channel CHx according to instance]\n\nCurrent > 'Current Error Threshold' [user set]",
        101: "TEC Power Output Error:\nOvercurrent (negative) at OUT+\n[Channel CHx according to instance]\n\n|Current| > 'Current Error Threshold' [user set]",
        102: "TEC Power Output Error:\nOvercurrent (positive) at OUT-\n[Channel CHx according to instance]\n\nCurrent > 'Current Error Threshold' [user set]",
        103: "TEC Power Output Error:\nOvercurrent (negative) at OUT-\n[Channel CHx according to instance]\n\n|Current| > 'Current Error Threshold' [user set]",
        104: "TEC Power Output Error:\nOvervoltage at OUT+\n[Channel CHx according to instance]\n\nVoltage > 'Voltage Error Threshold' [user set]",
        105: "TEC Power Output Error:\nOvervoltage at OUT-\n[Channel CHx according to instance]\n\nVoltage > 'Voltage Error Threshold' [user set]",
        106: "TEC Power Output Error:\nResidual current too high. The Current difference between OUT+ and OUT- is too big.\nLAbs(I+ - I-) > Imax *0.1\n\nCheck output cables for insulation defects",
        107: "TEC Power Output Error:\nOverall current monitoring\nFast switch off (reacts within 10 us)",
        108: "TEC Power Output Error:\nOutput Stage is in saturation for more than 1ms (by default)\n\nCheck input current is sufficient and Vout not set too close to Vin. Try to reduce the 'Current Limitation' or 'Voltage Limitation' in the Operation tab!",
        109: "TEC Power Output Error:\nCurrents through Drivers OUT+ and OUT- too unequal\n[Channel CHx according to instance]\n\nLeak current at output, faulty current detection",
        110: "TEC Power Output Error:\nAllowed total output power reached\n\nReduce Output Power",
        111: "TEC Power Output Error:\nThe connected load has a too low resistance in compare to the input voltage.\n\nReduce the output current or input voltage.\nExample calculation for I out > (IMAX * 2/3):\nMinR = (VIN * 13%) / (IMAX * 2/3)",
        120: "Current Measurement Error:\nOffset during initialization of OUT+ current monitor too high\n[Channel CHx according to instance]",
        121: "Current Measurement Error:\nOffset during initialization of OUT+ current monitor too low\n[Channel CHx according to instance]",
        122: "Current Measurement Error:\nOffset during initialization of OUT- current monitor too high\n[Channel CHx according to instance]",
        123: "Current Measurement Error:\nOffset during initialization of OUT- current monitor too low\n[Channel CHx according to instance]",
        130: "Object Temperature Measurement Circuit Initialization failure:\nWrong detected ready signal",
        131: "Object Temperature Measurement Circuit failure:\nConfiguration read back failed",
        132: "Object Temperature Measurement Error:\nExternal ADC supply voltage out of range\n(-5% < AVDD < +5%)",
        133: "Object Temperature Measurement Error:\n23bit ADC raw value below safety margin\n(< 500000 [6%])",
        134: "Object Temperature Measurement Error:\n23bit ADC raw value above safety margin\n(> 8350000 [99.5%]).\nOr the measured resistance is > 1MOhm.",
        137: "Object Temperature Measurement Error:\nMeasured object temperature < 'Lower Error Threshold' [user set]",
        138: "Object Temperature Measurement Error:\nMeasured object temperature > 'Upper Error Threshold' [user set]",
        139: "Object Temperature Measurement Error:\nChange in measured object temperature too fast (outpacing thermal inertia)\n\n(Value > 'Max Temp Change' [user set])",
        150: "Object Temperature Measurement Circuit failure:\nReady signal is out of synchronization",
        151: "Object Temperature Measurement Circuit failure:\nSeveral times the same ADC value read",
        152: "Object Temperature Measurement Circuit failure:\nADS Self Check failed\nIRs out of range",
        153: "Object Temperature Measurement Circuit failure:\nADS Self Check failed\nVRef out of range",
        140: "Sink Temperature Measurement Error:\n12bit ADC raw value below safety margin\n(< 40 [1%])",
        141: "Sink Temperature Measurement Error:\n12bit ADC raw value above safety margin\n(> 4050 [99%])",
        142: "Sink Temperature Measurement Error:\nMeasured sink temperature < 'Lower Error Threshold' [user set]",
        143: "Sink Temperature Measurement Error:\nMeasured sink temperature > 'Upper Error Threshold' [user set]",
        144: "Sink Temperature Measurement Error:\nChange in measured sink temperature too fast (outpacing thermal inertia)\n\n(Value > 'Max Temp Change' [user set])",
        160: "InterBoard Connection Error:\n[1089-based Master only]\nNo slave device detected via IBC\n\nNo device, no cable?",
        161: "InterBoard Connection Error:\n[1089-based Master only]\nDetected slave is not a TEC-1089",
        162: "InterBoard Connection Error:\n[1089-based Master only]\nMaster and slave have different FW version",
        163: "InterBoard Connection Error:\n[1089-based Master only]\nMaster and slave have different FW build",
        164: "InterBoard Connection Error:\n[1089-based Master only]\nMore than 3 Communication errors per parameter set (time out, checksum, address, acknowledge,...)\n\nKeep IBC cable short",
        165: "InterBoard Connection Error:\n[1089-based Slave only] (and only visible when slave being monitored):\nSlave is in error mode due to error occurred in master device\n\nPlease diagnose master",
        170: "Auto Tune Progress Error:\nLess than 3% of progress advancement in 5/60 minutes",
        171: "Auto Tune Error:\nAuto tuning failures at three consecutive attempts due to more than 40% discrepancy in temperature",
        172: "Auto Tune Error:\nAuto tuning failures at three consecutive attempts due to more than 40% discrepancy in waveform period",
        173: "Auto Tune Error:\nThe Temperature Controller is in its limitation or is not running.\n\nMake sure the Temperature Controller is Running and the Temperature has equalized before you start the Auto Tuning.",
        175: "Fan Control Error:\nFan Speed Regulation runs in limitation\nActual Fan Speed < 60% of Nominal Fan Speed\nwhile 12s",
        176: "Fan Control Error:\nFan is blocked\nNo rotation while 10s",
        180: "Lookup Table Error:\nUnknown Instruction",
        181: "Lookup Table Error:\nMisuse of an Instruction",
        182: "Temperature Stability not reached in specified time.",
        183: "Communication Watchdog",
        184: "Display Format Argument String Syntax Error",
    }

    def Get_COM_DeviceType(self, channel = 1):
        return self._read_value(100, MeParType.INT32, channel)

    def Get_COM_HardwareVersion(self, channel = 1):
        return self._read_value(101, MeParType.INT32, channel)

    def Get_COM_SerialNumber(self, channel = 1):
        return self._read_value(102, MeParType.INT32, channel)

    def Get_COM_FirmwareVersion(self, channel = 1):
        return self._read_value(103, MeParType.INT32, channel)

    def Get_COM_DeviceStatus(self, channel = 1):
        return self._read_value(104, MeParType.INT32, channel)

    def Get_COM_ErrorNumber(self, channel = 1):
        return self._read_value(105, MeParType.INT32, channel)

    def Get_COM_ErrorInstance(self, channel = 1):
        return self._read_value(106, MeParType.INT32, channel)

    def Get_COM_ErrorParameter(self, channel = 1):
        return self._read_value(107, MeParType.INT32, channel)

    def Get_COM_ParameterSystemFlashSaveOff(self, channel = 1):
        return self._read_value(108, MeParType.INT32, channel)
    def Set_COM_ParameterSystemFlashSaveOff(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(108, MeParType.INT32, value, channel, fire_and_forget)

    def Get_COM_ParameterSystemFlashStatus(self, channel = 1):
        return self._read_value(109, MeParType.INT32, channel)

    def Get_TEC_ObjectTemperature(self, channel = 1):
        return self._read_value(1000, MeParType.FLOAT32, channel)

    def Get_TEC_SinkTemperature(self, channel = 1):
        return self._read_value(1001, MeParType.FLOAT32, channel)

    def Get_TEC_TargetObjectTemperature(self, channel = 1):
        return self._read_value(1010, MeParType.FLOAT32, channel)

    def Get_TEC_RampNominalObjectTemperature(self, channel = 1):
        return self._read_value(1011, MeParType.FLOAT32, channel)

    def Get_TEC_ThermalPowerModelCurrent(self, channel = 1):
        return self._read_value(1012, MeParType.FLOAT32, channel)

    def Get_TEC_ActualOutputCurrent(self, channel = 1):
        return self._read_value(1020, MeParType.FLOAT32, channel)

    def Get_TEC_ActualOutputVoltage(self, channel = 1):
        return self._read_value(1021, MeParType.FLOAT32, channel)

    def Get_TEC_PIDLowerLimitation(self, channel = 1):
        return self._read_value(1030, MeParType.FLOAT32, channel)

    def Get_TEC_PIDUpperLimitation(self, channel = 1):
        return self._read_value(1031, MeParType.FLOAT32, channel)

    def Get_TEC_PIDControlVariable(self, channel = 1):
        return self._read_value(1032, MeParType.FLOAT32, channel)

    def Get_TEC_ObjectSensorRawADCValue(self, channel = 1):
        return self._read_value(1040, MeParType.INT32, channel)

    def Get_TEC_SinkSensorRawADCValue(self, channel = 1):
        return self._read_value(1041, MeParType.INT32, channel)

    def Get_TEC_ObjectSensorResistance(self, channel = 1):
        return self._read_value(1042, MeParType.FLOAT32, channel)

    def Get_TEC_SinkSensorResitance(self, channel = 1):
        return self._read_value(1043, MeParType.FLOAT32, channel)

    def Get_TEC_SinkSensorTemperature(self, channel = 1):
        return self._read_value(1044, MeParType.FLOAT32, channel)

    def Get_TEC_FirmwareVersion(self, channel = 1):
        return self._read_value(1050, MeParType.INT32, channel)

    def Get_TEC_FirmwareBuildNumber(self, channel = 1):
        return self._read_value(1051, MeParType.INT32, channel)

    def Get_TEC_HardwareVersion(self, channel = 1):
        return self._read_value(1052, MeParType.INT32, channel)

    def Get_TEC_SerialNumber(self, channel = 1):
        return self._read_value(1053, MeParType.INT32, channel)

    def Get_TEC_DriverInputVoltage(self, channel = 1):
        return self._read_value(1060, MeParType.FLOAT32, channel)

    def Get_TEC_MedVInternalSupply(self, channel = 1):
        return self._read_value(1061, MeParType.FLOAT32, channel)

    def Get_TEC_3VInternalSupply(self, channel = 1):
        return self._read_value(1062, MeParType.FLOAT32, channel)

    def Get_TEC_BasePlateTemperature(self, channel = 1):
        return self._read_value(1063, MeParType.FLOAT32, channel)

    def Get_TEC_ErrorNumber(self, channel = 1):
        return self._read_value(1070, MeParType.INT32, channel)

    def Get_TEC_ErrorInstance(self, channel = 1):
        return self._read_value(1071, MeParType.INT32, channel)

    def Get_TEC_ErrorParameter(self, channel = 1):
        return self._read_value(1072, MeParType.INT32, channel)

    def Get_TEC_ParallelActualOutputCurrent(self, channel = 1):
        return self._read_value(1090, MeParType.FLOAT32, channel)

    def Get_TEC_DriverStatus(self, channel = 1):
        return self._read_value(1080, MeParType.INT32, channel)

    def Get_TEC_ParameterSystemFlashStatus(self, channel = 1):
        return self._read_value(1081, MeParType.INT32, channel)

    def Get_TEC_FanRelativeCoolingPower(self, channel = 1):
        return self._read_value(1100, MeParType.FLOAT32, channel)

    def Get_TEC_FanNominalFanSpeed(self, channel = 1):
        return self._read_value(1101, MeParType.FLOAT32, channel)

    def Get_TEC_FanActualFanSpeed(self, channel = 1):
        return self._read_value(1102, MeParType.FLOAT32, channel)

    def Get_TEC_FanActualPwmLevel(self, channel = 1):
        return self._read_value(1103, MeParType.FLOAT32, channel)

    def Get_TEC_TemperatureIsStable(self, channel = 1):
        return self._read_value(1200, MeParType.INT32, channel)

    def Get_TEC_OutputStageInputSelection(self, channel = 1):
        return self._read_value(2000, MeParType.INT32, channel)
    def Set_TEC_OutputStageInputSelection(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(2000, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_OutputStageEnable(self, channel = 1):
        return self._read_value(2010, MeParType.INT32, channel)
    def Set_TEC_OutputStageEnable(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(2010, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_SetStaticCurrent(self, channel = 1):
        return self._read_value(2020, MeParType.FLOAT32, channel)
    def Set_TEC_SetStaticCurrent(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(2020, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_SetStaticVoltage(self, channel = 1):
        return self._read_value(2021, MeParType.FLOAT32, channel)
    def Set_TEC_SetStaticVoltage(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(2021, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_CurrentLimitation(self, channel = 1):
        return self._read_value(2030, MeParType.FLOAT32, channel)
    def Set_TEC_CurrentLimitation(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(2030, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_VoltageLimitation(self, channel = 1):
        return self._read_value(2031, MeParType.FLOAT32, channel)
    def Set_TEC_VoltageLimitation(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(2031, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_CurrentErrorThreshold(self, channel = 1):
        return self._read_value(2032, MeParType.FLOAT32, channel)
    def Set_TEC_CurrentErrorThreshold(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(2032, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_VoltageErrorThreshold(self, channel = 1):
        return self._read_value(2033, MeParType.FLOAT32, channel)
    def Set_TEC_VoltageErrorThreshold(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(2033, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_GeneralOperatingMode(self, channel = 1):
        return self._read_value(2040, MeParType.INT32, channel)
    def Set_TEC_GeneralOperatingMode(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(2040, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_DeviceAddress(self, channel = 1):
        return self._read_value(2051, MeParType.INT32, channel)
    def Set_TEC_DeviceAddress(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(2051, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_RS485CH1BaudRate(self, channel = 1):
        return self._read_value(2050, MeParType.INT32, channel)
    def Set_TEC_RS485CH1BaudRate(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(2050, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_RS485CH1ResponseDelay(self, channel = 1):
        return self._read_value(2052, MeParType.INT32, channel)
    def Set_TEC_RS485CH1ResponseDelay(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(2052, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_ComWatchDogTimeout(self, channel = 1):
        return self._read_value(2060, MeParType.FLOAT32, channel)
    def Set_TEC_ComWatchDogTimeout(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(2060, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_TargetObjectTemp(self, channel = 1):
        return self._read_value(3000, MeParType.FLOAT32, channel)
    def Set_TEC_TargetObjectTemp(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(3000, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_CoarseTempRamp(self, channel = 1):
        return self._read_value(3003, MeParType.FLOAT32, channel)
    def Set_TEC_CoarseTempRamp(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(3003, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_ProximityWidth(self, channel = 1):
        return self._read_value(3002, MeParType.FLOAT32, channel)
    def Set_TEC_ProximityWidth(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(3002, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_Kp(self, channel = 1):
        return self._read_value(3010, MeParType.FLOAT32, channel)
    def Set_TEC_Kp(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(3010, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_Ti(self, channel = 1):
        return self._read_value(3011, MeParType.FLOAT32, channel)
    def Set_TEC_Ti(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(3011, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_Td(self, channel = 1):
        return self._read_value(3012, MeParType.FLOAT32, channel)
    def Set_TEC_Td(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(3012, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_DPartDampPT1(self, channel = 1):
        return self._read_value(3013, MeParType.FLOAT32, channel)
    def Set_TEC_DPartDampPT1(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(3013, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_ModelizationMode(self, channel = 1):
        return self._read_value(3020, MeParType.INT32, channel)
    def Set_TEC_ModelizationMode(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(3020, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_PeltierMaxCurrent(self, channel = 1):
        return self._read_value(3030, MeParType.FLOAT32, channel)
    def Set_TEC_PeltierMaxCurrent(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(3030, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_PeltierMaxVoltage(self, channel = 1):
        return self._read_value(3031, MeParType.FLOAT32, channel)
    def Set_TEC_PeltierMaxVoltage(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(3031, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_PeltierCoolingCapacity(self, channel = 1):
        return self._read_value(3032, MeParType.FLOAT32, channel)
    def Set_TEC_PeltierCoolingCapacity(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(3032, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_PeltierDeltaTemperature(self, channel = 1):
        return self._read_value(3033, MeParType.FLOAT32, channel)
    def Set_TEC_PeltierDeltaTemperature(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(3033, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_PeltierPositiveCurrentIs(self, channel = 1):
        return self._read_value(3034, MeParType.INT32, channel)
    def Set_TEC_PeltierPositiveCurrentIs(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(3034, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_ResistorResistance(self, channel = 1):
        return self._read_value(3040, MeParType.FLOAT32, channel)
    def Set_TEC_ResistorResistance(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(3040, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_ResistorMaxCurrent(self, channel = 1):
        return self._read_value(3041, MeParType.FLOAT32, channel)
    def Set_TEC_ResistorMaxCurrent(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(3041, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_TemperatureOffset(self, channel = 1):
        return self._read_value(4001, MeParType.FLOAT32, channel)
    def Set_TEC_TemperatureOffset(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(4001, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_TemperatureGain(self, channel = 1):
        return self._read_value(4002, MeParType.FLOAT32, channel)
    def Set_TEC_TemperatureGain(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(4002, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_LowerErrorThreshold(self, channel = 1):
        return self._read_value(4010, MeParType.FLOAT32, channel)
    def Set_TEC_LowerErrorThreshold(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(4010, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_UpperErrorThreshold(self, channel = 1):
        return self._read_value(4011, MeParType.FLOAT32, channel)
    def Set_TEC_UpperErrorThreshold(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(4011, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_MaxTempChange(self, channel = 1):
        return self._read_value(4012, MeParType.FLOAT32, channel)
    def Set_TEC_MaxTempChange(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(4012, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_NTCLowerPointTemperature(self, channel = 1):
        return self._read_value(4020, MeParType.FLOAT32, channel)
    def Set_TEC_NTCLowerPointTemperature(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(4020, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_NTCLowerPointResistance(self, channel = 1):
        return self._read_value(4021, MeParType.FLOAT32, channel)
    def Set_TEC_NTCLowerPointResistance(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(4021, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_NTCMiddlePointTemperature(self, channel = 1):
        return self._read_value(4022, MeParType.FLOAT32, channel)
    def Set_TEC_NTCMiddlePointTemperature(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(4022, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_NTCMiddlePointResistance(self, channel = 1):
        return self._read_value(4023, MeParType.FLOAT32, channel)
    def Set_TEC_NTCMiddlePointResistance(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(4023, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_NTCUpperPointTemperature(self, channel = 1):
        return self._read_value(4024, MeParType.FLOAT32, channel)
    def Set_TEC_NTCUpperPointTemperature(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(4024, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_NTCUpperPointResistance(self, channel = 1):
        return self._read_value(4025, MeParType.FLOAT32, channel)
    def Set_TEC_NTCUpperPointResistance(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(4025, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_StabilityTemperatureWindow(self, channel = 1):
        return self._read_value(4040, MeParType.FLOAT32, channel)
    def Set_TEC_StabilityTemperatureWindow(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(4040, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_StabilityMinTimeInWindow(self, channel = 1):
        return self._read_value(4041, MeParType.FLOAT32, channel)
    def Set_TEC_StabilityMinTimeInWindow(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(4041, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_StabilityMaxStabiTime(self, channel = 1):
        return self._read_value(4042, MeParType.FLOAT32, channel)
    def Set_TEC_StabilityMaxStabiTime(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(4042, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_MeasLowestResistance(self, channel = 1):
        return self._read_value(4030, MeParType.FLOAT32, channel)

    def Get_TEC_MeasHighestResistance(self, channel = 1):
        return self._read_value(4031, MeParType.FLOAT32, channel)

    def Get_TEC_MeasTempAtLowestResistance(self, channel = 1):
        return self._read_value(4032, MeParType.FLOAT32, channel)

    def Get_TEC_MeasTempAtHighestResistance(self, channel = 1):
        return self._read_value(4033, MeParType.FLOAT32, channel)

    def Get_TEC_TemperatureOffset(self, channel = 1):
        return self._read_value(5001, MeParType.FLOAT32, channel)
    def Set_TEC_TemperatureOffset(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(5001, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_TemperatureGain(self, channel = 1):
        return self._read_value(5002, MeParType.FLOAT32, channel)
    def Set_TEC_TemperatureGain(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(5002, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_LowerErrorThreshold(self, channel = 1):
        return self._read_value(5010, MeParType.FLOAT32, channel)
    def Set_TEC_LowerErrorThreshold(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(5010, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_UpperErrorThreshold(self, channel = 1):
        return self._read_value(5011, MeParType.FLOAT32, channel)
    def Set_TEC_UpperErrorThreshold(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(5011, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_MaxTempChange(self, channel = 1):
        return self._read_value(5012, MeParType.FLOAT32, channel)
    def Set_TEC_MaxTempChange(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(5012, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_NTCLowerPointTemperature(self, channel = 1):
        return self._read_value(5020, MeParType.FLOAT32, channel)
    def Set_TEC_NTCLowerPointTemperature(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(5020, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_NTCLowerPointResistance(self, channel = 1):
        return self._read_value(5021, MeParType.FLOAT32, channel)
    def Set_TEC_NTCLowerPointResistance(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(5021, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_NTCMiddlePointTemperature(self, channel = 1):
        return self._read_value(5022, MeParType.FLOAT32, channel)
    def Set_TEC_NTCMiddlePointTemperature(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(5022, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_NTCMiddlePointResistance(self, channel = 1):
        return self._read_value(5023, MeParType.FLOAT32, channel)
    def Set_TEC_NTCMiddlePointResistance(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(5023, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_NTCUpperPointTemperature(self, channel = 1):
        return self._read_value(5024, MeParType.FLOAT32, channel)
    def Set_TEC_NTCUpperPointTemperature(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(5024, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_NTCUpperPointResistance(self, channel = 1):
        return self._read_value(5025, MeParType.FLOAT32, channel)
    def Set_TEC_NTCUpperPointResistance(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(5025, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_SinkTemperatureSelection(self, channel = 1):
        return self._read_value(5030, MeParType.INT32, channel)
    def Set_TEC_SinkTemperatureSelection(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(5030, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_FixedTemperature(self, channel = 1):
        return self._read_value(5031, MeParType.FLOAT32, channel)
    def Set_TEC_FixedTemperature(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(5031, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_MeasLowestResistance(self, channel = 1):
        return self._read_value(5040, MeParType.FLOAT32, channel)

    def Get_TEC_MeasHighestResistance(self, channel = 1):
        return self._read_value(5041, MeParType.FLOAT32, channel)

    def Get_TEC_MeasTempAtLowestResistance(self, channel = 1):
        return self._read_value(5042, MeParType.FLOAT32, channel)

    def Get_TEC_MeasTempAtHighestResistance(self, channel = 1):
        return self._read_value(5043, MeParType.FLOAT32, channel)

    def Get_TEC_ObjMeasPGAGain(self, channel = 1):
        return self._read_value(6000, MeParType.INT32, channel)
    def Set_TEC_ObjMeasPGAGain(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6000, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_ObjMeasCurrentSource(self, channel = 1):
        return self._read_value(6001, MeParType.INT32, channel)
    def Set_TEC_ObjMeasCurrentSource(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6001, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_ObjMeasADCRs(self, channel = 1):
        return self._read_value(6002, MeParType.FLOAT32, channel)
    def Set_TEC_ObjMeasADCRs(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6002, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_ObjMeasADCCalibOffset(self, channel = 1):
        return self._read_value(6003, MeParType.FLOAT32, channel)
    def Set_TEC_ObjMeasADCCalibOffset(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6003, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_ObjMeasADCCalibGain(self, channel = 1):
        return self._read_value(6004, MeParType.FLOAT32, channel)
    def Set_TEC_ObjMeasADCCalibGain(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6004, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_ObjMeasSensorTypeSelection(self, channel = 1):
        return self._read_value(6005, MeParType.INT32, channel)
    def Set_TEC_ObjMeasSensorTypeSelection(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6005, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_SinMeasADCRv(self, channel = 1):
        return self._read_value(6010, MeParType.FLOAT32, channel)
    def Set_TEC_SinMeasADCRv(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6010, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_SinMeasADCVps(self, channel = 1):
        return self._read_value(6013, MeParType.FLOAT32, channel)
    def Set_TEC_SinMeasADCVps(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6013, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_SinMeasADCCalibOffset(self, channel = 1):
        return self._read_value(6011, MeParType.FLOAT32, channel)
    def Set_TEC_SinMeasADCCalibOffset(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6011, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_SinMeasADCCalibGain(self, channel = 1):
        return self._read_value(6012, MeParType.FLOAT32, channel)
    def Set_TEC_SinMeasADCCalibGain(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6012, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_DisplayType(self, channel = 1):
        return self._read_value(6020, MeParType.INT32, channel)
    def Set_TEC_DisplayType(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6020, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_AlternativeMode(self, channel = 1):
        return self._read_value(6023, MeParType.INT32, channel)
    def Set_TEC_AlternativeMode(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6023, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_DisplayLineDefText(self, channel = 1):
        return self._read_value(6024, MeParType.INT32, channel)
    def Set_TEC_DisplayLineDefText(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6024, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_DisplayLineAltText(self, channel = 1):
        return self._read_value(6025, MeParType.INT32, channel)
    def Set_TEC_DisplayLineAltText(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6025, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_DisplayLineAltMode(self, channel = 1):
        return self._read_value(6026, MeParType.INT32, channel)
    def Set_TEC_DisplayLineAltMode(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6026, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_PbcFunction(self, channel = 1):
        return self._read_value(6100, MeParType.INT32, channel)
    def Set_TEC_PbcFunction(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6100, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_ChangeButtonLowTemperature(self, channel = 1):
        return self._read_value(6110, MeParType.FLOAT32, channel)
    def Set_TEC_ChangeButtonLowTemperature(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6110, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_ChangeButtonHighTemperature(self, channel = 1):
        return self._read_value(6111, MeParType.FLOAT32, channel)
    def Set_TEC_ChangeButtonHighTemperature(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6111, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_ChangeButtonStepSize(self, channel = 1):
        return self._read_value(6112, MeParType.FLOAT32, channel)
    def Set_TEC_ChangeButtonStepSize(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6112, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_FanControlEnable(self, channel = 1):
        return self._read_value(6200, MeParType.INT32, channel)
    def Set_TEC_FanControlEnable(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6200, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_FanActualTempSource(self, channel = 1):
        return self._read_value(6210, MeParType.INT32, channel)
    def Set_TEC_FanActualTempSource(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6210, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_FanTargetTemp(self, channel = 1):
        return self._read_value(6211, MeParType.FLOAT32, channel)
    def Set_TEC_FanTargetTemp(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6211, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_FanTempKp(self, channel = 1):
        return self._read_value(6212, MeParType.FLOAT32, channel)
    def Set_TEC_FanTempKp(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6212, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_FanTempTi(self, channel = 1):
        return self._read_value(6213, MeParType.FLOAT32, channel)
    def Set_TEC_FanTempTi(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6213, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_FanTempTd(self, channel = 1):
        return self._read_value(6214, MeParType.FLOAT32, channel)
    def Set_TEC_FanTempTd(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6214, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_FanSpeedMin(self, channel = 1):
        return self._read_value(6220, MeParType.FLOAT32, channel)
    def Set_TEC_FanSpeedMin(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6220, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_FanSpeedMax(self, channel = 1):
        return self._read_value(6221, MeParType.FLOAT32, channel)
    def Set_TEC_FanSpeedMax(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6221, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_FanSpeedKp(self, channel = 1):
        return self._read_value(6222, MeParType.FLOAT32, channel)
    def Set_TEC_FanSpeedKp(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6222, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_FanSpeedTi(self, channel = 1):
        return self._read_value(6223, MeParType.FLOAT32, channel)
    def Set_TEC_FanSpeedTi(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6223, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_FanSpeedTd(self, channel = 1):
        return self._read_value(6224, MeParType.FLOAT32, channel)
    def Set_TEC_FanSpeedTd(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6224, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_FanSpeedBypass(self, channel = 1):
        return self._read_value(6225, MeParType.INT32, channel)
    def Set_TEC_FanSpeedBypass(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6225, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_PwmFrequency(self, channel = 1):
        return self._read_value(6230, MeParType.INT32, channel)
    def Set_TEC_PwmFrequency(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6230, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_MiscActObjectTempSource(self, channel = 1):
        return self._read_value(6300, MeParType.INT32, channel)
    def Set_TEC_MiscActObjectTempSource(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6300, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_MiscDelayTillReset(self, channel = 1):
        return self._read_value(6310, MeParType.INT32, channel)
    def Set_TEC_MiscDelayTillReset(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6310, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_MiscError108Delay(self, channel = 1):
        return self._read_value(6320, MeParType.INT32, channel)
    def Set_TEC_MiscError108Delay(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(6320, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_LiveEnable(self, channel = 1):
        return self._read_value(50000, MeParType.INT32, channel)
    def Set_TEC_LiveEnable(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(50000, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_LiveSetCurrent(self, channel = 1):
        return self._read_value(50001, MeParType.FLOAT32, channel)
    def Set_TEC_LiveSetCurrent(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(50001, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_LiveSetVoltage(self, channel = 1):
        return self._read_value(50002, MeParType.FLOAT32, channel)
    def Set_TEC_LiveSetVoltage(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(50002, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_SineRampStartPoint(self, channel = 1):
        return self._read_value(50010, MeParType.INT32, channel)
    def Set_TEC_SineRampStartPoint(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(50010, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_ObjectTargetTempSourceSelection(self, channel = 1):
        return self._read_value(50011, MeParType.INT32, channel)
    def Set_TEC_ObjectTargetTempSourceSelection(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(50011, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_ObjectTargetTemperature(self, channel = 1):
        return self._read_value(50012, MeParType.FLOAT32, channel)
    def Set_TEC_ObjectTargetTemperature(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(50012, MeParType.FLOAT32, value, channel, fire_and_forget)

    def Get_TEC_AtmAutoTuningStart(self, channel = 1):
        return self._read_value(51000, MeParType.INT32, channel)
    def Set_TEC_AtmAutoTuningStart(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(51000, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_AtmAutoTuningCancel(self, channel = 1):
        return self._read_value(51001, MeParType.INT32, channel)
    def Set_TEC_AtmAutoTuningCancel(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(51001, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_AtmThermalModelSpeed(self, channel = 1):
        return self._read_value(51002, MeParType.INT32, channel)
    def Set_TEC_AtmThermalModelSpeed(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(51002, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_AtmTuningParameter2A(self, channel = 1):
        return self._read_value(51010, MeParType.FLOAT32, channel)

    def Get_TEC_AtmTuningParameter2D(self, channel = 1):
        return self._read_value(51011, MeParType.FLOAT32, channel)

    def Get_TEC_AtmTuningParameterKu(self, channel = 1):
        return self._read_value(51012, MeParType.FLOAT32, channel)

    def Get_TEC_AtmTuningParameterTu(self, channel = 1):
        return self._read_value(51013, MeParType.FLOAT32, channel)

    def Get_TEC_AtmPIDParameterKp(self, channel = 1):
        return self._read_value(51014, MeParType.FLOAT32, channel)

    def Get_TEC_AtmPIDParameterTi(self, channel = 1):
        return self._read_value(51015, MeParType.FLOAT32, channel)

    def Get_TEC_AtmPIDParameterTd(self, channel = 1):
        return self._read_value(51016, MeParType.FLOAT32, channel)

    def Get_TEC_AtmSlowPIParameterKp(self, channel = 1):
        return self._read_value(51022, MeParType.FLOAT32, channel)

    def Get_TEC_AtmSlowPIParameterTi(self, channel = 1):
        return self._read_value(51023, MeParType.FLOAT32, channel)

    def Get_TEC_AtmPIDDPartDamping(self, channel = 1):
        return self._read_value(51024, MeParType.FLOAT32, channel)

    def Get_TEC_AtmCoarseTempRamp(self, channel = 1):
        return self._read_value(51017, MeParType.FLOAT32, channel)

    def Get_TEC_AtmProximityWidth(self, channel = 1):
        return self._read_value(51018, MeParType.FLOAT32, channel)

    def Get_TEC_AtmTuningStatus(self, channel = 1):
        return self._read_value(51020, MeParType.INT32, channel)

    def Get_TEC_AtmTuningProgress(self, channel = 1):
        return self._read_value(51021, MeParType.FLOAT32, channel)

    def Get_TEC_LutTableStart(self, channel = 1):
        return self._read_value(52000, MeParType.INT32, channel)
    def Set_TEC_LutTableStart(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(52000, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_LutTableStop(self, channel = 1):
        return self._read_value(52001, MeParType.INT32, channel)
    def Set_TEC_LutTableStop(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(52001, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_LutTableStatus(self, channel = 1):
        return self._read_value(52002, MeParType.INT32, channel)
    def Set_TEC_LutTableStatus(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(52002, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_LutCurrentTableLine(self, channel = 1):
        return self._read_value(52003, MeParType.INT32, channel)
    def Set_TEC_LutCurrentTableLine(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(52003, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_LutTableIDSelection(self, channel = 1):
        return self._read_value(52010, MeParType.INT32, channel)
    def Set_TEC_LutTableIDSelection(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(52010, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_LutNrOfRepetitions(self, channel = 1):
        return self._read_value(52012, MeParType.INT32, channel)
    def Set_TEC_LutNrOfRepetitions(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(52012, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_PbcEnableFunction(self, channel = 1):
        return self._read_value(52100, MeParType.INT32, channel)
    def Set_TEC_PbcEnableFunction(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(52100, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_PbcSetOutputToPushPull(self, channel = 1):
        return self._read_value(52101, MeParType.INT32, channel)
    def Set_TEC_PbcSetOutputToPushPull(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(52101, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_PbcSetOutputStates(self, channel = 1):
        return self._read_value(52102, MeParType.INT32, channel)
    def Set_TEC_PbcSetOutputStates(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(52102, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_PbcReadInputStates(self, channel = 1):
        return self._read_value(52103, MeParType.INT32, channel)
    def Set_TEC_PbcReadInputStates(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(52103, MeParType.INT32, value, channel, fire_and_forget)

    def Get_TEC_ExternalActualObjectTemperature(self, channel = 1):
        return self._read_value(52200, MeParType.FLOAT32, channel)
    def Set_TEC_ExternalActualObjectTemperature(self, value, channel = 1, fire_and_forget = False):
        return self._write_value(52200, MeParType.FLOAT32, value, channel, fire_and_forget)

